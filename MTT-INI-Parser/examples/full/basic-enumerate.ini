#-------------------------------------------------------------------------

#
# An INI file that uses enumerate to cause a multiplicative impact on the execution tree.
#
# Execution Tree:
# - MPI Get: ompi-nightly-trunk
# --- MPI install: gcc warnings
# ----- Test get: trivial
# ------- Test build: trivial
# --------- Test run: trivial
# ----------- 4 tests x 4 np x 2 argv x (3 map x 3 mca) exec = 288 individual test runs
#

#======================================================================
# Overall configuration
#======================================================================

[MTT]

hostlist = localhost

textwrap = 120

drain_timeout = 5

scratch = &getenv("HOME")/work/mtt-project/mtt-scratch

submit_group_results = 1

max_np = 16

#----------------------------------------------------------------------

#======================================================================
# MPI get phase
#======================================================================

[MPI get: ompi-nightly-trunk]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://www.open-mpi.org/nightly/master

#----------------------------------------------------------------------

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: gcc warnings]
mpi_get = ompi-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 64

module = OMPI
ompi_vpath_mode = none

ompi_make_all_arguments = -j 8
ompi_make_check = 1

ompi_compiler_name = gnu
ompi_compiler_version = &get_gcc_version()
ompi_configure_arguments = CFLAGS=-pipe --enable-picky --enable-debug

#----------------------------------------------------------------------

#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]

exec = mpirun -np &test_np() @mca@ @map@ --prefix &test_prefix() &test_executable() &test_argv()

map = &enumerate( \
    "", \
    "--map-by core", \
    "--map-by socket")

mca = &enumerate("", \
    "--mca btl sm,tcp,self", \
    "--mca btl sm,self")

#----------------------------------------------------------------------

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Trivial

#----------------------------------------------------------------------

#======================================================================
# Test Run phase
#======================================================================

[Defaults Test run]
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = &and(&test_wifexited(), &eq(&test_wexitstatus(), 77))

save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
report_after_n_results = 100

np = &env_max_procs()


#----------------------------------------------------------------------

[Test run: trivial]
include_section = Defaults Test run

test_build = trivial
timeout = &max(10, &test_np())
skipped = 0

np = &enumerate(2, 4, 8, &env_max_procs())
argv = &enumerate("foo", "bar")

specify_module = Simple
simple_first:tests = &find_executables(".")

#----------------------------------------------------------------------

#======================================================================
# Reporter phase
#======================================================================

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")
who am i: &shell("who am i")
EOT

textfile_summary_footer =
textfile_detail_header =
textfile_detail_footer =
textfile_textwrap = 78

#----------------------------------------------------------------------