#-------------------------------------------------------------------------

#======================================================================
# Overall configuration
#======================================================================

[MTT]

hostlist = localhost

textwrap = 76

drain_timeout = 5

scratch = &getenv("HOME")/work/mtt-project/mtt-scratch

submit_group_results = 1

#----------------------------------------------------------------------

#======================================================================
# MPI get phase
#======================================================================

[MPI get: ompi-nightly-trunk]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://www.open-mpi.org/nightly/master

#----------------------------------------------------------------------

[MPI get: ompi-nightly-v1.8]
mpi_details = Open MPI

module = OMPI_Snapshot
ompi_snapshot_url = http://www.open-mpi.org/nightly/v1.8

#----------------------------------------------------------------------

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: gcc warnings]
mpi_get = ompi-nightly-trunk,ompi-nightly-v1.8
#mpi_get = ompi-nightly-trunk
save_stdout_on_success = 1
merge_stdout_stderr = 0
bitness = 64

module = OMPI
ompi_vpath_mode = none

ompi_make_all_arguments = -j 8
ompi_make_check = 1

ompi_compiler_name = gnu
ompi_compiler_version = &get_gcc_version()
ompi_configure_arguments = CFLAGS=-pipe --enable-picky --enable-debug

#----------------------------------------------------------------------

#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]

exec = mpirun @hosts@ -np &test_np() --prefix &test_prefix() &test_executable() &test_argv()

hosts = &if(&have_hostfile(), "--hostfile " . &hostfile(), \
            &if(&have_hostlist(), "--host " . &hostlist(), ""))

#----------------------------------------------------------------------

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: intel]
module = SCM
scm_module = Git
scm_url = /home/mpiteam/mirror-git/ompi-tests
scm_subdir = intel_tests

#----------------------------------------------------------------------

[Test get: ibm]
module = SCM
scm_module = Git
scm_url = /home/mpiteam/mirror-git/ompi-tests
scm_subdir = ibm
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Trivial

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Intel_OMPI_Tests
intel_ompi_tests_make_arguments = -j 32
intel_ompi_tests_buildfile = all_tests_no_perf

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure --enable-static --disable-shared
make -j 32
EOT

#----------------------------------------------------------------------

#======================================================================
# Test Run phase
#======================================================================

[Defaults Test run]
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = &and(&test_wifexited(), &eq(&test_wexitstatus(), 77))

save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
report_after_n_results = 100

np = &env_max_procs()

#----------------------------------------------------------------------

[Test run: trivial]
include_section = Defaults Test run

test_build = trivial
timeout = &max(10, &test_np())
skipped = 0

specify_module = Simple
simple_first:tests = &find_executables(".")

#----------------------------------------------------------------------

[Test run: intel]
include_section = Defaults Test run

test_build = intel
timeout = &max(30, &multiply(20, &test_np()))
np = &min("60", &env_max_procs())

specify_module = Simple
simple_successful:tests = &find_executables("src")

simple_failures:tests = &find_executables(&prepend("src/", &cat("supposed_to_fail")))
simple_failures:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_failures:exclusive = 1
simple_failures:timeout = &env_max_procs()

# These tests sleep for 90 seconds (!) before attempting to process
# any messages
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(180, &multiply(5, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(35, &test_np())

#------------------------------------------------------------------------

[Test run: ibm]
include_section = Defaults Test run

test_build = ibm
timeout = &max(30, &multiply(10, &test_np()))

specify_module = Simple
simple_first:np = &env_max_procs()
simple_first:tests = &find_executables("collective", "communicator", \
                                       "datatype", "dynamic", "environment", \
                                       "group", "info", "io", "onesided", \
                                       "pt2pt", "random", "topology")

# Tests that are supposed to fail
simple_fail:tests = environment/abort environment/final
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:timeout = &env_max_procs()

# Spawn tests; need to run very few
simple_spawns:tests  = dynamic/spawn dynamic/spawn_multiple
simple_spawns:np = 3
simple_spawns:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_spawns:exclusive = 1
simple_spawns:timeout = &multiply(5,&env_max_procs())

# Big loop o' spawns
simple_loop_spawn:tests = dynamic/loop_spawn
simple_loop_spawn:np = 1
simple_loop_spawn:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_loop_spawn:exclusive = 1
simple_loop_spawn:timeout = 600

# Big loop o' comm splits and whatnot.  It runs for 10 minutes.
simple_loop_comm_split:tests = communicator/comm_split_f
simple_loop_comm_split:np = 1
simple_loop_comm_split:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_loop_comm_split:exclusive = 1
simple_loop_comm_split:timeout = 660

# THREAD_MULTIPLE test will fail with the openib btl because it
# deactivates itself in the presence of THREAD_MULTIPLE.  So just skip
# it.  loop_child is the target for loop_spawn, so we don't need to
# run it (although it'll safely pass if you run it by itself).
simple_skip:tests = environment/init_thread_multiple dynamic/loop_child
simple_skip:exclusive = 1
simple_skip:do_not_run = 1

#----------------------------------------------------------------------

#======================================================================
# Reporter phase
#======================================================================

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")
who am i: &shell("who am i")
EOT

textfile_summary_footer =
textfile_detail_header =
textfile_detail_footer =
textfile_textwrap = 78

#----------------------------------------------------------------------
